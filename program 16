# Feed Forward Neural Network Implementation

import numpy as np

class FeedForwardNN:
    def __init__(self, input_size, hidden_size, output_size):
        self.weights_input_hidden = np.random.rand(input_size, hidden_size)
        self.weights_hidden_output = np.random.rand(hidden_size, output_size)
        self.bias_hidden = np.random.rand(hidden_size)
        self.bias_output = np.random.rand(output_size)

    def sigmoid(self, x):
        return 1 / (1 + np.exp(-x))

    def forward(self, x):
        self.hidden_layer_input = np.dot(x, self.weights_input_hidden) + self.bias_hidden
        self.hidden_layer_output = self.sigmoid(self.hidden_layer_input)
        self.output_layer_input = np.dot(self.hidden_layer_output, self.weights_hidden_output) + self.bias_output
        self.output = self.sigmoid(self.output_layer_input)
        return self.output

# Example usage
if __name__ == "__main__":
    input_size = 3
    hidden_size = 5
    output_size = 2
    nn = FeedForwardNN(input_size, hidden_size, output_size)
    
    sample_input = np.array([0.1, 0.2, 0.3])
    output = nn.forward(sample_input)
    print("Output of the neural network:", output)
